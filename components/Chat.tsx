'use client';

import React, { useEffect, useMemo, useRef, useState } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';

type Role = 'user' | 'assistant';

type Msg = {
  id: string;
  role: Role;
  content: string;
  imagePreview?: string | null;
};

const STORAGE_KEY = 'chat-history-v1';
const THEME_ATTR = 'data-theme';

export default function Chat() {
  const [messages, setMessages] = useState<Msg[]>([]);
  const [text, setText] = useState('');
  const [file, setFile] = useState<File | null>(null);
  const [isSending, setIsSending] = useState(false);

  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å "—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ" (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ç—É–º–±–ª–µ—Ä)
  const [browserSTT, setBrowserSTT] = useState(true);

  // –¢–µ–º–∞ (light/dark), —Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞ <html data-theme="...">
  const [theme, setTheme] = useState<'light' | 'dark'>(() => {
    if (typeof document !== 'undefined') {
      return (document.documentElement.getAttribute(THEME_ATTR) as 'light' | 'dark') || 'dark';
    }
    return 'dark';
  });

  // === –ò—Å—Ç–æ—Ä–∏—è: –ø–æ–¥–Ω–∏–º–∞–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ===
  useEffect(() => {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (raw) {
        const parsed: Msg[] = JSON.parse(raw);
        setMessages(parsed);
      } else {
        // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
        setMessages([
          {
            id: crypto.randomUUID(),
            role: 'assistant',
            content:
              '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ **–∫–æ–∫—Å–æ—Ö–∏–º-–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É**. ' +
              '–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ–º–æ–≥—É —Å —Ä–∞—Å—á—ë—Ç–∞–º–∏, —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏.',
          },
        ]);
      }
    } catch {
      // –∏–≥–Ω–æ—Ä
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  useEffect(() => {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(messages));
    } catch {
      // –∏–≥–Ω–æ—Ä
    }
  }, [messages]);

  // –¢–µ–º–∞ ‚Äî —Å—Ä–∞–∑—É –Ω–∞ html
  useEffect(() => {
    if (typeof document !== 'undefined') {
      document.documentElement.setAttribute(THEME_ATTR, theme);
    }
  }, [theme]);

  function toggleTheme() {
    const next = theme === 'dark' ? 'light' : 'dark';
    setTheme(next);
    try {
      localStorage.setItem('theme', next);
    } catch {}
  }

  async function handleSend() {
    const trimmed = text.trim();
    if (!trimmed && !file) return;

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø—Ä–µ–≤—å—é –¥–ª—è UI
    let preview: string | null = null;
    if (file) {
      preview = URL.createObjectURL(file);
    }

    const userMsg: Msg = {
      id: crypto.randomUUID(),
      role: 'user',
      content: trimmed || (file ? '(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)' : ''),
      imagePreview: preview,
    };
    setMessages((m) => [...m, userMsg]);
    setText('');
    setIsSending(true);

    // –ì–æ—Ç–æ–≤–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ base64 –¥–ª—è API
    let imageBase64: string | null = null;
    let imageType: string | null = null;
    if (file) {
      const buf = await file.arrayBuffer();
      const bytes = new Uint8Array(buf);
      imageBase64 = btoa(String.fromCharCode(...bytes));
      imageType = file.type || 'image/png';
    }

    try {
      const res = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: trimmed,
          imageBase64,
          imageType,
          browserSTT, // –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–∏–Ω–µ–º —Ñ–ª–∞–∂–æ–∫ (–Ω–∞ –±—É–¥—É—â–µ–µ)
        }),
      });

      if (!res.ok) throw new Error('bad response');
      const data = await res.json();

      const bot: Msg = {
        id: crypto.randomUUID(),
        role: 'assistant',
        content: String(data.text || '‚Ä¶'),
      };
      setMessages((m) => [...m, bot]);
    } catch (e) {
      const err: Msg = {
        id: crypto.randomUUID(),
        role: 'assistant',
        content:
          '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å API-–∫–ª—é—á–∞ –≤ OpenAI Billing –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `OPENAI_API_KEY` –Ω–∞ Vercel.',
      };
      setMessages((m) => [...m, err]);
    } finally {
      setIsSending(false);
      setFile(null);
      if (preview) URL.revokeObjectURL(preview);
    }
  }

  function handleKeyDown(e: React.KeyboardEvent<HTMLTextAreaElement>) {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  }

  function newChat() {
    setMessages([
      {
        id: crypto.randomUUID(),
        role: 'assistant',
        content:
          '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ **–∫–æ–∫—Å–æ—Ö–∏–º-–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É**. ' +
          '–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ–º–æ–≥—É —Å —Ä–∞—Å—á—ë—Ç–∞–º–∏, —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏.',
      },
    ]);
    try {
      localStorage.removeItem(STORAGE_KEY);
    } catch {}
  }

  return (
    <div className="chat-root">
      {/* –®–∞–ø–∫–∞ */}
      <div className="chat-topbar">
        <div className="title">–í–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</div>
        <div className="actions">
          <label className="check">
            <input
              type="checkbox"
              checked={browserSTT}
              onChange={(e) => setBrowserSTT(e.target.checked)}
            />
            <span>–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ</span>
          </label>

          <button className="btn" onClick={toggleTheme}>
            {theme === 'dark' ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è' : 'üåô –¢—ë–º–Ω–∞—è'}
          </button>

          <button className="btn ghost" onClick={newChat}>
            –ù–æ–≤—ã–π —á–∞—Ç
          </button>
        </div>
      </div>

      {/* –õ–µ–Ω—Ç–∞ */}
      <div className="chat-list">
        {messages.map((m) => (
          <div key={m.id} className={`msg ${m.role === 'user' ? 'me' : 'bot'}`}>
            {m.imagePreview && (
              <div className="img">
                {/* –ø—Ä–µ–≤—å—é –≤–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                <img src={m.imagePreview} alt="attachment" />
              </div>
            )}
            {m.content && (
              <ReactMarkdown remarkPlugins={[remarkMath]} rehypePlugins={[rehypeKatex]}>
                {m.content}
              </ReactMarkdown>
            )}
          </div>
        ))}
      </div>

      {/* –ö–æ–º–ø–æ–∑–µ—Ä */}
      <div className="composer">
        <label className="file">
          <input
            type="file"
            accept="image/*"
            onChange={(e) => setFile(e.target.files?.[0] || null)}
          />
          {file ? '–§–∞–π–ª: ' + file.name : 'üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ'}
        </label>

        <textarea
          placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å‚Ä¶"
          value={text}
          onChange={(e) => setText(e.target.value)}
          onKeyDown={handleKeyDown}
          rows={1}
        />

        <button className="btn primary" onClick={handleSend} disabled={isSending}>
          {isSending ? '–û—Ç–ø—Ä–∞–≤–∫–∞‚Ä¶' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
        </button>
      </div>
    </div>
  );
}

/* ====== –°—Ç–∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ, –ø–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã) ====== */
