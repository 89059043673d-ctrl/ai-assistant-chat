"use client";

import React, { useEffect, useRef, useState } from "react";

type Role = "user" | "assistant";
type Message = { role: Role; content: string };

export default function Chat() {
  const [messages, setMessages] = useState<Message[]>([
    {
      role: "assistant",
      content:
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–æ–∫—Å–æ—Ö–∏–º-–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ–º–æ–≥—É —Å —Ä–∞—Å—á—ë—Ç–∞–º–∏, —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏.",
    },
  ]);
  const [input, setInput] = useState("");
  const [isSending, setIsSending] = useState(false);
  const [file, setFile] = useState<File | null>(null);

  const listRef = useRef<HTMLDivElement>(null);

  // –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
  useEffect(() => {
    listRef.current?.scrollTo({ top: listRef.current.scrollHeight, behavior: "smooth" });
  }, [messages]);

  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    if (isSending) return;

    const text = input.trim();
    if (!text && !file) return;

    // –ª–æ–∫–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const nextMessages = [...messages, { role: "user", content: text || "üìé –§–∞–π–ª" }];
    setMessages(nextMessages);
    setInput("");
    setIsSending(true);

    try {
      // —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: —Ç–µ–∫—Å—Ç + (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏) –∏–º—è —Ñ–∞–π–ª–∞
      const body: any = { messages: nextMessages };
      if (file) {
        body.fileName = file.name;
      }

      const res = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });

      // —á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç
      let assistantText = "";
      if (res.headers.get("content-type")?.includes("application/json")) {
        const data = await res.json();
        assistantText =
          data.reply ?? data.message ?? data.content ?? "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.";
      } else {
        assistantText = await res.text();
      }

      setMessages((prev) => [...prev, { role: "assistant", content: assistantText }]);
    } catch (err: any) {
      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          content:
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å API-–∫–ª—é—á–∞ –≤ OpenAI Billing –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–∞ Vercel.",
        },
      ]);
    } finally {
      setIsSending(false);
      setFile(null);
    }
  }

  function handleKeyDown(e: React.KeyboardEvent<HTMLTextAreaElement>) {
    // Enter ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞, Shift+Enter ‚Äî –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      (e.currentTarget.form as HTMLFormElement | null)?.requestSubmit();
    }
  }

  return (
    <div className="flex h-[100dvh] w-full flex-col bg-zinc-50 text-zinc-900 dark:bg-zinc-950 dark:text-zinc-100">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <div className="flex items-center justify-between border-b border-zinc-200 bg-white px-4 py-3 dark:border-zinc-800 dark:bg-zinc-900">
        <div className="text-sm font-medium">–í–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</div>
        <div className="text-xs text-zinc-500">–ì–æ–ª–æ—Å: –≥–æ—Ç–æ–≤</div>
      </div>

      {/* –õ–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <div ref={listRef} className="flex-1 overflow-auto px-3 py-4 sm:px-5">
        <div className="mx-auto max-w-3xl space-y-3">
          {messages.map((m, i) => (
            <div key={i} className="flex">
              <div
                className={
                  m.role === "assistant"
                    ? "ml-0 mr-auto max-w-[90%] rounded-2xl bg-zinc-100 px-4 py-3 text-sm dark:bg-zinc-800"
                    : "ml-auto mr-0 max-w-[90%] rounded-2xl bg-blue-600 px-4 py-3 text-sm text-white"
                }
              >
                {
